<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<parent>
		<artifactId>parent</artifactId>
		<groupId>com.vw</groupId>
		<version>0.0.4-SNAPSHOT</version>
	</parent>

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.volkswagen</groupId>
	<artifactId>visit-reporting</artifactId>
	<packaging>war</packaging>
	<name>Visit Reporting Web Application</name>


	<properties>
		<java.version>1.6</java.version>
		<springVersion>3.0.5.RELEASE</springVersion>
		<hibernateVersion>3.6.7.Final</hibernateVersion>
		<maven.build.timestamp.format>yyyyMMdd-HHmm</maven.build.timestamp.format>
		
		<my.env>src/main/resources/config</my.env><!-- the location of the default configuration file, in case my.env is not specified on the command line -->
		<other.server.hostname>localhost</other.server.hostname><!-- the hostname of the other server that this application is deployed to in a multi-server environment -->
	</properties>


	<dependencies>

		<!-- Web libraries -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId><!-- required at compile time, but provided on server -->
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<scope>compile</scope><!-- vw parent pom marks this as provided, but is required for Tomcat -->
		</dependency>
		
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
		</dependency>

		<dependency>
			<groupId>opensymphony</groupId>
			<artifactId>sitemesh</artifactId>
			<version>2.3</version>
		</dependency>


		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${springVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${springVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${springVersion}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId><!-- Used at runtime by spring context config -->
			<version>${springVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId><!-- Used at runtime by spring context config -->
			<version>${springVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId><!-- Used at runtime by spring context config -->
			<version>${springVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${springVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>3.2.2.RELEASE</version>
			<!-- scope>test</scope--><!-- used by DbUtils class in main to run initial data scripts -->
		</dependency>
		
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>3.1.3.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId><!-- Used at runtime by spring context config -->
			<version>3.1.3.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>3.1.3.RELEASE</version>
		</dependency>
   		<dependency>
      			<groupId>org.springframework.security</groupId>
       			<artifactId>spring-security-taglibs</artifactId>
       		<version>3.1.3.RELEASE</version>
  		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>1.6.11</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId><!-- required for AOP but not explicitly used -->
			<version>1.6.11</version>
		</dependency>
		<dependency>
		    <groupId>cglib</groupId><!-- required for AOP but not explicitly used -->
		    <artifactId>cglib</artifactId>
		    <version>2.2.2</version>
		</dependency>
		<dependency>
		    <groupId>javassist</groupId>
		    <artifactId>javassist</artifactId><!-- required for AOP but not explicitly used -->
		    <version>3.12.1.GA</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${springVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${springVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${springVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${springVersion}</version>
		</dependency>


		<!-- Persistance -->
		<dependency>
			<groupId>org.hibernate.java-persistence</groupId>
			<artifactId>jpa-api</artifactId>
			<version>2.0-cr-1</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernateVersion}</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId><!-- required by Hibernate by not explicitly used -->
			<version>${hibernateVersion}</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId><!-- required by Hibernate by not explicitly used -->
			<version>4.0.2.GA</version>
		</dependency>
		
		<dependency>
			<groupId>hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>1.8.0.10</version>
		</dependency>
		
		
		<!-- Auditing -->
		<!-- 
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-envers</artifactId>
		    <version>${hibernateVersion}</version>
		</dependency>
	 	-->
		
		<!-- Caching -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache-core</artifactId>
			<version>2.4.3</version>
			<exclusions>
				<exclusion>
					<groupId>net.sf.ehcache</groupId>
					<artifactId>ehcache-terracotta</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>net.sf.jsr107cache</groupId><!-- Required by EHCache but not explicitly used -->
			<artifactId>jsr107cache</artifactId>
			<version>1.1</version>
		</dependency>


		<!-- Logging -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>apache-log4j-extras</artifactId><!-- Used at runtime when logging is configured with DailyRollingAppender -->
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.5.8</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId><!-- Required to add log4j logging via slf4j -->
			<version>1.5.8</version>			
		</dependency>
		<!-- 
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.5.8</version>
			<scope>runtime</scope>
		</dependency>
		 -->
		
		
		<!-- Document Management -->
		<dependency>
		    <groupId>org.openoffice</groupId>
		    <artifactId>juh</artifactId>
		    <version>3.2.1</version>
		</dependency>
		<dependency>
		    <groupId>org.openoffice</groupId>
		    <artifactId>unoil</artifactId>
		    <version>3.2.1</version>
		</dependency>
		<dependency>
		    <groupId>org.openoffice</groupId>
		    <artifactId>ridl</artifactId>
		    <version>3.2.1</version>
		</dependency>

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2</version>
		</dependency>
		
		<!-- Testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.dbunit</groupId>
			<artifactId>dbunit</artifactId>
			<version>2.4.8</version>
		</dependency>
            
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.1</version>
			<scope>test</scope>
		</dependency>
	
		<!-- 
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium</artifactId>
			<version>2.0b1</version>
			<scope>test</scope>
		</dependency>
		 -->


		<!-- UTILITIES -->
		<dependency>
		    <groupId>com.google.guava</groupId>
		    <artifactId>guava</artifactId>
		    <version>r05</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>
				
		<dependency>
            <groupId>com.lowagie</groupId>
            <artifactId>itext</artifactId>
            <version>2.1.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.6</version>
		</dependency>	

	</dependencies>

	<issueManagement>
		<system>Jira</system>
		<url>https://issues.jboss.org/</url>
	</issueManagement>
	<ciManagement>
		<system>Jenkins</system>
		<url>http://vwukm2ssapp126.vwguk.emea.vwg/jenkins/job/visitreporting/</url>
	</ciManagement>
	<scm>
		<connection>${vwuk.svn.provider}/com/vw/visitreporting/trunk</connection>
		<developerConnection>${vwuk.svn.provider}/com/vw/visitreporting/trunk</developerConnection>
		<url>http://vwukm2ssapp126.vwguk.emea.vwg/viewvc/ace/com/vw/visitreporting/</url>
	</scm>
	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.*</include>
				</includes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>

		<plugins>
		
			<!-- Copy appropriate configuration file to config.properties in resources -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<phase>process-resources</phase>
						<configuration>
							<tasks>
								<copy file="${basedir}/${my.env}.properties" tofile="${basedir}/target/classes/config.properties" overwrite="true" />
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		
			<!-- Also load the appropriate properties file so that those properties are available to maven -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>${basedir}/${my.env}.properties</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- Clear database and insert a dataset before test phase using dbUnit -->
			<!-- 
					Do this programatically with DbUtils class instead
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>dbunit-maven-plugin</artifactId>
				<version>1.0-beta-3</version>
				<dependencies>
					<dependency>
						<groupId>hsqldb</groupId>
						<artifactId>hsqldb</artifactId>
						<version>1.8.0.10</version>
					</dependency>
				</dependencies>
				<configuration>
					<driver>${config.db.driver}</driver>
					<url>${config.db.url}</url>
					<username>${config.db.user}</username>
					<password>${config.db.pass}</password>
				</configuration>
				<executions>
					<execution>
						<phase>test-compile</phase>
						<goals>
							<goal>operation</goal>
						</goals>
						<configuration>
							<type>CLEAN_INSERT</type>
							<src>src/test/resources/dbUnitTestData.xml</src>
							<supportBatchStatement>true</supportBatchStatement>
							<transaction>true</transaction>
						</configuration>
					</execution>
				</executions>
			</plugin>
			 -->
			
			<!-- Export DB creation script (including Envers audit tables) -->
			<!-- 
					Use DDL script from Enterprise Architect now
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.6</version>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
							
								<property name="compile_classpath" refid="maven.compile.classpath" />
															
								<taskdef name="hibernatetool"
										 classname="org.hibernate.tool.ant.EnversHibernateToolTask"
										 classpath="${compile_classpath}"/>
								
								<hibernatetool destdir=".">
									<classpath>
										<path location="${compile_classpath}" />
									</classpath>
									<jpaconfiguration persistenceunit="vr-punit" />
									<hbm2ddl
									    drop="false"
									    create="true"
									    export="false"
									    outputfilename="database/001_createTables.sql"
									    delimiter=";"
									    format="true"/>
								</hibernatetool>
							
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			 -->

			<!-- setup jetty server - run "mvn jetty:run" -->
			<!-- (no longer used)
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
				<version>6.1.10</version>
				<configuration>
					<stopPort>9966</stopPort>
					<stopKey>foo</stopKey>
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<requestLog implementation="org.mortbay.jetty.NCSARequestLog">
						<filename>target/yyyy_mm_dd.request.log</filename>
						<retainDays>1</retainDays>
						<append>true</append>
						<extended>false</extended>
						<logTimeZone>GMT</logTimeZone>
					</requestLog>
				</configuration>
			</plugin>
			 -->

			
			<!-- generate the jrebel.xml configuration file -->
			<plugin>
				<groupId>org.zeroturnaround</groupId>
				<artifactId>javarebel-maven-plugin</artifactId>
				<version>1.0.5</version>
				<executions>
					<execution>
						<id>generate-rebel-xml</id>
						<phase>process-resources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!-- Compress (Minify + Ofuscate) Javascript files and CSS files -->
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>yuicompressor-maven-plugin</artifactId>
				<version>1.1</version>
			</plugin>


			<!-- Set Java version -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

			<!-- Run unit tests -->			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.7.1</version>
				<!-- Through Selenium dependencies TESTNG Seems to have snuk on the classpath and become the default test framework. Explicitly disable TestNG -->
				<configuration>
					<testNGArtifactName>none:none</testNGArtifactName>
<!--   all tests are now run as unit tests (tests that require the database and test more than one class are postfixed with *DBTest.java
					<excludes>
						<exclude>**/*DBTest.java</exclude>
					</excludes>
 -->
				</configuration>
			</plugin>

			<!-- Run integration tests -->
			<!--   all tests are now run as unit tests (tests that require the database and test more than one class are postfixed with *DBTest.java
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.10</version>
				<configuration>
					<encoding>utf-8</encoding>
					<perCoreThreadCount>false</perCoreThreadCount>
					<parallel>none</parallel>
					<threadCount>1</threadCount>
					<includes>
						<include>**/*DBTest.java</include>
					</includes>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>2.10</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			-->

			<!-- Check test code coverage with Clover -->
			<plugin>
				<groupId>com.atlassian.maven.plugins</groupId>
				<artifactId>maven-clover2-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>com/vw/visitreporting/entity/**/*.java</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution> 
						<phase>pre-site</phase> 
						<goals> 
							<goal>instrument</goal> 
						</goals> 
					</execution> 
				</executions>
			</plugin>


			<!-- Generate site - run "mvn site" -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.0</version>
				<configuration>

					<reportPlugins>

						<!-- Check test code coverage with Clover -->
						<plugin>
							<groupId>com.atlassian.maven.plugins</groupId>
							<artifactId>maven-clover2-plugin</artifactId>
						</plugin>


						<!-- This is required to enable PMD to cross reference notifications with code -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-jxr-plugin</artifactId>
							<version>2.3</version>
						</plugin>


						<!-- Check code quality with PMD -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-pmd-plugin</artifactId>
							<version>2.5</version>
							<configuration>
								<targetJdk>1.6</targetJdk>
								
								<!-- .pmd is not a valid ruleset file -->
								<!--
								<rulesets>
									<ruleset>${basedir}/.pmd</ruleset>
								</rulesets>
								-->
								<verbose>true</verbose>
								<linkXref>true</linkXref>
								<sourceEncoding>utf-8</sourceEncoding>
								<minimumTokens>120</minimumTokens>
								<includeTests>true</includeTests>
							</configuration>
						</plugin>

						<!-- Generate JavaDoc -->
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-javadoc-plugin</artifactId>
							<version>2.8</version>
						</plugin>

						<!-- Generate the Surefire test report -->			
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-surefire-report-plugin</artifactId>
							<version>2.10</version>
						</plugin>

					</reportPlugins>
				</configuration>
			</plugin>

		</plugins>
	</build>
	
</project>